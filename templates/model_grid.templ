package templates

import (
	t "github.com/a-h/templ"
	"net/url"
	"fmt"
)

func safeViewURL(category, name string) t.SafeURL {
	return t.URL("/view/" + url.PathEscape(category) + "/" + url.PathEscape(name))
}

func getThumbnailPath(model Model) string {
	if model.Section != "" {
		return "/static/thumbnails/" + model.Category + "/" + model.Section + "/" + model.Name + ".webp"
	}
	return "/static/thumbnails/" + model.Category + "/" + model.Name + ".webp"
}

func getGridColumnsClass(columns int) string {
	return fmt.Sprintf("grid gap-6 grid-cols-%d", columns)
}

templ ModelGrid(models []Model, columns int) {
	<div id="model-grid">
		<div class="mb-6">
			<div class="flex items-center justify-between">
				<input
					type="search"
					id="model-search"
					name="search"
					placeholder="Search by name..."
					class="flex-1 px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
				/>
				<div class="flex items-center gap-2 ml-4">
					<span class="text-sm text-gray-600 dark:text-gray-300">Columns:</span>
					<button
						hx-get="/grid/columns/decrease"
						hx-target="#grid-content"
						hx-swap="outerHTML"
						class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-white"
					>
						-
					</button>
					<span 
                        id="column-count" 
                        class="text-sm text-gray-600 dark:text-gray-300 min-w-[1.5rem] text-center"
                        hx-get="/grid/columns/count"
                        hx-trigger="load, columnsChanged from:body"
                    >{ fmt.Sprint(columns) }</span>
					<button
						hx-get="/grid/columns/increase"
						hx-target="#grid-content"
						hx-swap="outerHTML"
						class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-white"
					>
						+
					</button>
				</div>
			</div>
		</div>
		@RenderGridContent(models, columns)
	</div>
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			const searchInput = document.getElementById('model-search');
			const modelCards = document.querySelectorAll('.model-card');

			function filterModels(searchTerm) {
				searchTerm = searchTerm.toLowerCase();
				modelCards.forEach(card => {
					const modelName = card.dataset.modelName.toLowerCase();
					const modelCategory = card.dataset.modelCategory.toLowerCase();
					const isVisible = modelName.includes(searchTerm) || modelCategory.includes(searchTerm);
					card.style.display = isVisible ? '' : 'none';
				});
			}

			// Debounce function to limit how often the filter runs
			function debounce(func, wait) {
				let timeout;
				return function executedFunction(...args) {
					const later = () => {
						clearTimeout(timeout);
						func(...args);
					};
					clearTimeout(timeout);
					timeout = setTimeout(later, wait);
				};
			}

			// Add event listener with debounce
			searchInput.addEventListener('input', debounce(function(e) {
				filterModels(e.target.value);
			}, 300));
		});

        // Listen for grid content updates and dispatch column change event
        document.body.addEventListener('htmx:afterSwap', function(evt) {
            if (evt.detail.target.id === 'grid-content') {
                document.body.dispatchEvent(new Event('columnsChanged'));
            }
        });
	</script>
}

templ RenderGridContent(models []Model, columns int) {
	<div 
		id="grid-content" 
		class={ getGridColumnsClass(columns) }
		style="display: grid; width: 100%;"
	>
		for _, model := range models {
			<a
				href={ safeViewURL(model.Category, model.Name) }
				class="group bg-white dark:bg-gray-800 rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow model-card"
				data-model-name={ model.Name }
				data-model-category={ model.Category }
			>
				<div class="aspect-square relative bg-gray-100 dark:bg-gray-900">
					<img
						src={ getThumbnailPath(model) }
						alt={ "Thumbnail of " + model.Name }
						class="w-full h-full object-contain p-2"
					/>
				</div>
				<div class="p-4">
					<h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-2">{ model.Name }</h3>
					<p class="text-sm text-gray-600 dark:text-gray-300">{ model.Category }</p>
					if model.Section != "" {
						<p class="text-sm text-gray-500 dark:text-gray-400">{ model.Section }</p>
					}
				</div>
			</a>
		}
	</div>
}

type GridState struct {
	models []Model
    lastSection string
}

func NewGridState(models []Model) GridState {
	return GridState{models: models}
}

templ (gs *GridState) renderSection(section string) {
	<div class="col-span-full">
		<h3 class="text-lg font-semibold text-slate-700 dark:text-slate-300 my-4 border-b border-slate-200 dark:border-slate-700 pb-2">
			{ section }
		</h3>
	</div>
}

templ (gs *GridState) renderModelCard(model Model) {
	<a
		href={ safeViewURL(model.Category, model.Name) }
		class="group bg-white dark:bg-slate-800 rounded-lg p-4 hover:bg-slate-50 dark:hover:bg-slate-700 transition-all duration-200 shadow-sm hover:shadow-md block"
		aria-label={ "View " + model.Name }
	>
		<div class="aspect-square w-full bg-slate-100 dark:bg-slate-900 rounded-lg mb-3 overflow-hidden">
			<img
				src={ "/static/thumbnails/" + model.Category + "/" + model.Name + ".webp" }
				alt={ "Thumbnail of " + model.Name }
				class="w-full h-full object-cover"
			/>
		</div>
		<h2 class="text-slate-800 dark:text-white text-sm font-medium text-center truncate">
			{ model.Name }
		</h2>
	</a>
}

templ (gs *GridState) Render() {
	for _, model := range gs.models {
		if model.Section != gs.lastSection {
			if model.Section != "" {
				@gs.renderSection(model.Section)
			}
			gs.lastSection = model.Section
		}
		@gs.renderModelCard(model)
	}
}

templ link(href string) {
	<a href={ templ.SafeURL(href) }>
		{ children... }
	</a>
} 